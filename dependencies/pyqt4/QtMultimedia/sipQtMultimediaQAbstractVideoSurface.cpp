/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.6
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtMultimedia.h"

#line 33 "/home/archen/MyRepos/graphite/PyQt-x11-gpl-4.11.3/sip/QtMultimedia/qabstractvideosurface.sip"
#include <qabstractvideosurface.h>
#line 34 "/home/archen/MyRepos/graphite/PyQt-x11-gpl-4.11.3/QtMultimedia/sipQtMultimediaQAbstractVideoSurface.cpp"

#line 34 "/home/archen/MyRepos/graphite/PyQt-x11-gpl-4.11.3/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 38 "/home/archen/MyRepos/graphite/PyQt-x11-gpl-4.11.3/QtMultimedia/sipQtMultimediaQAbstractVideoSurface.cpp"
#line 33 "/home/archen/MyRepos/graphite/PyQt-x11-gpl-4.11.3/sip/QtMultimedia/qvideosurfaceformat.sip"
#include <qvideosurfaceformat.h>
#line 41 "/home/archen/MyRepos/graphite/PyQt-x11-gpl-4.11.3/QtMultimedia/sipQtMultimediaQAbstractVideoSurface.cpp"
#line 33 "/home/archen/MyRepos/graphite/PyQt-x11-gpl-4.11.3/sip/QtMultimedia/qvideoframe.sip"
#include <qvideoframe.h>
#line 44 "/home/archen/MyRepos/graphite/PyQt-x11-gpl-4.11.3/QtMultimedia/sipQtMultimediaQAbstractVideoSurface.cpp"
#line 154 "/home/archen/MyRepos/graphite/PyQt-x11-gpl-4.11.3/sip/QtMultimedia/qvideoframe.sip"
#include <qvideoframe.h>
#line 47 "/home/archen/MyRepos/graphite/PyQt-x11-gpl-4.11.3/QtMultimedia/sipQtMultimediaQAbstractVideoSurface.cpp"
#line 33 "/home/archen/MyRepos/graphite/PyQt-x11-gpl-4.11.3/sip/QtMultimedia/qabstractvideobuffer.sip"
#include <qabstractvideobuffer.h>
#line 50 "/home/archen/MyRepos/graphite/PyQt-x11-gpl-4.11.3/QtMultimedia/sipQtMultimediaQAbstractVideoSurface.cpp"
#line 31 "/home/archen/MyRepos/graphite/PyQt-x11-gpl-4.11.3/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 53 "/home/archen/MyRepos/graphite/PyQt-x11-gpl-4.11.3/QtMultimedia/sipQtMultimediaQAbstractVideoSurface.cpp"
#line 355 "/home/archen/MyRepos/graphite/PyQt-x11-gpl-4.11.3/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 56 "/home/archen/MyRepos/graphite/PyQt-x11-gpl-4.11.3/QtMultimedia/sipQtMultimediaQAbstractVideoSurface.cpp"
#line 338 "/home/archen/MyRepos/graphite/PyQt-x11-gpl-4.11.3/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 59 "/home/archen/MyRepos/graphite/PyQt-x11-gpl-4.11.3/QtMultimedia/sipQtMultimediaQAbstractVideoSurface.cpp"
#line 274 "/home/archen/MyRepos/graphite/PyQt-x11-gpl-4.11.3/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 62 "/home/archen/MyRepos/graphite/PyQt-x11-gpl-4.11.3/QtMultimedia/sipQtMultimediaQAbstractVideoSurface.cpp"
#line 33 "/home/archen/MyRepos/graphite/PyQt-x11-gpl-4.11.3/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 65 "/home/archen/MyRepos/graphite/PyQt-x11-gpl-4.11.3/QtMultimedia/sipQtMultimediaQAbstractVideoSurface.cpp"
#line 37 "/home/archen/MyRepos/graphite/PyQt-x11-gpl-4.11.3/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 68 "/home/archen/MyRepos/graphite/PyQt-x11-gpl-4.11.3/QtMultimedia/sipQtMultimediaQAbstractVideoSurface.cpp"
#line 35 "/home/archen/MyRepos/graphite/PyQt-x11-gpl-4.11.3/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 71 "/home/archen/MyRepos/graphite/PyQt-x11-gpl-4.11.3/QtMultimedia/sipQtMultimediaQAbstractVideoSurface.cpp"
#line 120 "/home/archen/MyRepos/graphite/PyQt-x11-gpl-4.11.3/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 74 "/home/archen/MyRepos/graphite/PyQt-x11-gpl-4.11.3/QtMultimedia/sipQtMultimediaQAbstractVideoSurface.cpp"
#line 31 "/home/archen/MyRepos/graphite/PyQt-x11-gpl-4.11.3/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 77 "/home/archen/MyRepos/graphite/PyQt-x11-gpl-4.11.3/QtMultimedia/sipQtMultimediaQAbstractVideoSurface.cpp"
#line 36 "/home/archen/MyRepos/graphite/PyQt-x11-gpl-4.11.3/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 80 "/home/archen/MyRepos/graphite/PyQt-x11-gpl-4.11.3/QtMultimedia/sipQtMultimediaQAbstractVideoSurface.cpp"
#line 35 "/home/archen/MyRepos/graphite/PyQt-x11-gpl-4.11.3/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 83 "/home/archen/MyRepos/graphite/PyQt-x11-gpl-4.11.3/QtMultimedia/sipQtMultimediaQAbstractVideoSurface.cpp"
#line 31 "/home/archen/MyRepos/graphite/PyQt-x11-gpl-4.11.3/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 86 "/home/archen/MyRepos/graphite/PyQt-x11-gpl-4.11.3/QtMultimedia/sipQtMultimediaQAbstractVideoSurface.cpp"


class sipQAbstractVideoSurface : public QAbstractVideoSurface
{
public:
    sipQAbstractVideoSurface(QObject*);
    virtual ~sipQAbstractVideoSurface();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const char*);
    void connectNotify(const char*);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    bool present(const QVideoFrame&);
    void stop();
    bool start(const QVideoSurfaceFormat&);
    QVideoSurfaceFormat nearestFormat(const QVideoSurfaceFormat&) const;
    bool isFormatSupported(const QVideoSurfaceFormat&) const;
    QList<QVideoFrame::PixelFormat> supportedPixelFormats(QAbstractVideoBuffer::HandleType) const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQAbstractVideoSurface(const sipQAbstractVideoSurface &);
    sipQAbstractVideoSurface &operator = (const sipQAbstractVideoSurface &);

    char sipPyMethods[13];
};

sipQAbstractVideoSurface::sipQAbstractVideoSurface(QObject*a0): QAbstractVideoSurface(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQAbstractVideoSurface::~sipQAbstractVideoSurface()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQAbstractVideoSurface::metaObject() const
{
    return sip_QtMultimedia_qt_metaobject(sipPySelf,sipType_QAbstractVideoSurface);
}

int sipQAbstractVideoSurface::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QAbstractVideoSurface::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtMultimedia_qt_metacall(sipPySelf,sipType_QAbstractVideoSurface,_c,_id,_a);

    return _id;
}

void *sipQAbstractVideoSurface::qt_metacast(const char *_clname)
{
    return (sip_QtMultimedia_qt_metacast(sipPySelf, sipType_QAbstractVideoSurface, _clname)) ? this : QAbstractVideoSurface::qt_metacast(_clname);
}

void sipQAbstractVideoSurface::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QAbstractVideoSurface::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQAbstractVideoSurface::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QAbstractVideoSurface::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQAbstractVideoSurface::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QAbstractVideoSurface::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQAbstractVideoSurface::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QAbstractVideoSurface::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQAbstractVideoSurface::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QAbstractVideoSurface::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQAbstractVideoSurface::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QAbstractVideoSurface::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[18]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQAbstractVideoSurface::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QAbstractVideoSurface::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQAbstractVideoSurface::present(const QVideoFrame& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,sipName_QAbstractVideoSurface,sipName_present);

    if (!sipMeth)
        return 0;

    extern bool sipVH_QtMultimedia_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QVideoFrame&);

    return sipVH_QtMultimedia_0(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQAbstractVideoSurface::stop()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_stop);

    if (!sipMeth)
    {
        QAbstractVideoSurface::stop();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[11]))(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQAbstractVideoSurface::start(const QVideoSurfaceFormat& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_start);

    if (!sipMeth)
        return QAbstractVideoSurface::start(a0);

    extern bool sipVH_QtMultimedia_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QVideoSurfaceFormat&);

    return sipVH_QtMultimedia_1(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QVideoSurfaceFormat sipQAbstractVideoSurface::nearestFormat(const QVideoSurfaceFormat& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,NULL,sipName_nearestFormat);

    if (!sipMeth)
        return QAbstractVideoSurface::nearestFormat(a0);

    extern QVideoSurfaceFormat sipVH_QtMultimedia_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QVideoSurfaceFormat&);

    return sipVH_QtMultimedia_2(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQAbstractVideoSurface::isFormatSupported(const QVideoSurfaceFormat& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_isFormatSupported);

    if (!sipMeth)
        return QAbstractVideoSurface::isFormatSupported(a0);

    extern bool sipVH_QtMultimedia_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QVideoSurfaceFormat&);

    return sipVH_QtMultimedia_1(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QList<QVideoFrame::PixelFormat> sipQAbstractVideoSurface::supportedPixelFormats(QAbstractVideoBuffer::HandleType a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,sipName_QAbstractVideoSurface,sipName_supportedPixelFormats);

    if (!sipMeth)
        return QList<QVideoFrame::PixelFormat>();

    extern QList<QVideoFrame::PixelFormat> sipVH_QtMultimedia_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QAbstractVideoBuffer::HandleType);

    return sipVH_QtMultimedia_3(sipGILState, 0, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QAbstractVideoSurface_supportedPixelFormats, "QAbstractVideoSurface.supportedPixelFormats(QAbstractVideoBuffer.HandleType type=QAbstractVideoBuffer.NoHandle) -> list-of-QVideoFrame.PixelFormat");

extern "C" {static PyObject *meth_QAbstractVideoSurface_supportedPixelFormats(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractVideoSurface_supportedPixelFormats(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QAbstractVideoBuffer::HandleType a0 = QAbstractVideoBuffer::NoHandle;
        const QAbstractVideoSurface *sipCpp;

        static const char *sipKwdList[] = {
            sipName_type,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|E", &sipSelf, sipType_QAbstractVideoSurface, &sipCpp, sipType_QAbstractVideoBuffer_HandleType, &a0))
        {
            QList<QVideoFrame::PixelFormat>*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractVideoSurface, sipName_supportedPixelFormats);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QVideoFrame::PixelFormat>(sipCpp->supportedPixelFormats(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QVideoFrame_PixelFormat,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractVideoSurface, sipName_supportedPixelFormats, doc_QAbstractVideoSurface_supportedPixelFormats);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractVideoSurface_isFormatSupported, "QAbstractVideoSurface.isFormatSupported(QVideoSurfaceFormat) -> bool");

extern "C" {static PyObject *meth_QAbstractVideoSurface_isFormatSupported(PyObject *, PyObject *);}
static PyObject *meth_QAbstractVideoSurface_isFormatSupported(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QVideoSurfaceFormat* a0;
        const QAbstractVideoSurface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractVideoSurface, &sipCpp, sipType_QVideoSurfaceFormat, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QAbstractVideoSurface::isFormatSupported(*a0) : sipCpp->isFormatSupported(*a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractVideoSurface, sipName_isFormatSupported, doc_QAbstractVideoSurface_isFormatSupported);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractVideoSurface_nearestFormat, "QAbstractVideoSurface.nearestFormat(QVideoSurfaceFormat) -> QVideoSurfaceFormat");

extern "C" {static PyObject *meth_QAbstractVideoSurface_nearestFormat(PyObject *, PyObject *);}
static PyObject *meth_QAbstractVideoSurface_nearestFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QVideoSurfaceFormat* a0;
        const QAbstractVideoSurface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractVideoSurface, &sipCpp, sipType_QVideoSurfaceFormat, &a0))
        {
            QVideoSurfaceFormat*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVideoSurfaceFormat((sipSelfWasArg ? sipCpp->QAbstractVideoSurface::nearestFormat(*a0) : sipCpp->nearestFormat(*a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVideoSurfaceFormat,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractVideoSurface, sipName_nearestFormat, doc_QAbstractVideoSurface_nearestFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractVideoSurface_surfaceFormat, "QAbstractVideoSurface.surfaceFormat() -> QVideoSurfaceFormat");

extern "C" {static PyObject *meth_QAbstractVideoSurface_surfaceFormat(PyObject *, PyObject *);}
static PyObject *meth_QAbstractVideoSurface_surfaceFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractVideoSurface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractVideoSurface, &sipCpp))
        {
            QVideoSurfaceFormat*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVideoSurfaceFormat(sipCpp->surfaceFormat());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVideoSurfaceFormat,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractVideoSurface, sipName_surfaceFormat, doc_QAbstractVideoSurface_surfaceFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractVideoSurface_start, "QAbstractVideoSurface.start(QVideoSurfaceFormat) -> bool");

extern "C" {static PyObject *meth_QAbstractVideoSurface_start(PyObject *, PyObject *);}
static PyObject *meth_QAbstractVideoSurface_start(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QVideoSurfaceFormat* a0;
        QAbstractVideoSurface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractVideoSurface, &sipCpp, sipType_QVideoSurfaceFormat, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QAbstractVideoSurface::start(*a0) : sipCpp->start(*a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractVideoSurface, sipName_start, doc_QAbstractVideoSurface_start);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractVideoSurface_stop, "QAbstractVideoSurface.stop()");

extern "C" {static PyObject *meth_QAbstractVideoSurface_stop(PyObject *, PyObject *);}
static PyObject *meth_QAbstractVideoSurface_stop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QAbstractVideoSurface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractVideoSurface, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractVideoSurface::stop() : sipCpp->stop());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractVideoSurface, sipName_stop, doc_QAbstractVideoSurface_stop);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractVideoSurface_isActive, "QAbstractVideoSurface.isActive() -> bool");

extern "C" {static PyObject *meth_QAbstractVideoSurface_isActive(PyObject *, PyObject *);}
static PyObject *meth_QAbstractVideoSurface_isActive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractVideoSurface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractVideoSurface, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isActive();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractVideoSurface, sipName_isActive, doc_QAbstractVideoSurface_isActive);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractVideoSurface_present, "QAbstractVideoSurface.present(QVideoFrame) -> bool");

extern "C" {static PyObject *meth_QAbstractVideoSurface_present(PyObject *, PyObject *);}
static PyObject *meth_QAbstractVideoSurface_present(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QVideoFrame* a0;
        QAbstractVideoSurface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractVideoSurface, &sipCpp, sipType_QVideoFrame, &a0))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractVideoSurface, sipName_present);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->present(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractVideoSurface, sipName_present, doc_QAbstractVideoSurface_present);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractVideoSurface_error, "QAbstractVideoSurface.error() -> QAbstractVideoSurface.Error");

extern "C" {static PyObject *meth_QAbstractVideoSurface_error(PyObject *, PyObject *);}
static PyObject *meth_QAbstractVideoSurface_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractVideoSurface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractVideoSurface, &sipCpp))
        {
            QAbstractVideoSurface::Error sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->error();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QAbstractVideoSurface_Error);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractVideoSurface, sipName_error, doc_QAbstractVideoSurface_error);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractVideoSurface_setError, "QAbstractVideoSurface.setError(QAbstractVideoSurface.Error)");

extern "C" {static PyObject *meth_QAbstractVideoSurface_setError(PyObject *, PyObject *);}
static PyObject *meth_QAbstractVideoSurface_setError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractVideoSurface::Error a0;
        QAbstractVideoSurface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pE", &sipSelf, sipType_QAbstractVideoSurface, &sipCpp, sipType_QAbstractVideoSurface_Error, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setError(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractVideoSurface, sipName_setError, doc_QAbstractVideoSurface_setError);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QAbstractVideoSurface(void *, const sipTypeDef *);}
static void *cast_QAbstractVideoSurface(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QAbstractVideoSurface)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QAbstractVideoSurface *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QAbstractVideoSurface(void *, int);}
static void release_QAbstractVideoSurface(void *sipCppV,int)
{
    QAbstractVideoSurface *sipCpp = reinterpret_cast<QAbstractVideoSurface *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QAbstractVideoSurface(sipSimpleWrapper *);}
static void dealloc_QAbstractVideoSurface(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQAbstractVideoSurface *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QAbstractVideoSurface(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QAbstractVideoSurface(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QAbstractVideoSurface(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQAbstractVideoSurface *sipCpp = 0;

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQAbstractVideoSurface(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QAbstractVideoSurface[] = {{141, 0, 1}};


static PyMethodDef methods_QAbstractVideoSurface[] = {
    {SIP_MLNAME_CAST(sipName_error), meth_QAbstractVideoSurface_error, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractVideoSurface_error)},
    {SIP_MLNAME_CAST(sipName_isActive), meth_QAbstractVideoSurface_isActive, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractVideoSurface_isActive)},
    {SIP_MLNAME_CAST(sipName_isFormatSupported), meth_QAbstractVideoSurface_isFormatSupported, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractVideoSurface_isFormatSupported)},
    {SIP_MLNAME_CAST(sipName_nearestFormat), meth_QAbstractVideoSurface_nearestFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractVideoSurface_nearestFormat)},
    {SIP_MLNAME_CAST(sipName_present), meth_QAbstractVideoSurface_present, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractVideoSurface_present)},
    {SIP_MLNAME_CAST(sipName_setError), meth_QAbstractVideoSurface_setError, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractVideoSurface_setError)},
    {SIP_MLNAME_CAST(sipName_start), meth_QAbstractVideoSurface_start, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractVideoSurface_start)},
    {SIP_MLNAME_CAST(sipName_stop), meth_QAbstractVideoSurface_stop, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractVideoSurface_stop)},
    {SIP_MLNAME_CAST(sipName_supportedPixelFormats), (PyCFunction)meth_QAbstractVideoSurface_supportedPixelFormats, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractVideoSurface_supportedPixelFormats)},
    {SIP_MLNAME_CAST(sipName_surfaceFormat), meth_QAbstractVideoSurface_surfaceFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractVideoSurface_surfaceFormat)}
};

static sipEnumMemberDef enummembers_QAbstractVideoSurface[] = {
    {sipName_IncorrectFormatError, static_cast<int>(QAbstractVideoSurface::IncorrectFormatError), 4},
    {sipName_NoError, static_cast<int>(QAbstractVideoSurface::NoError), 4},
    {sipName_ResourceError, static_cast<int>(QAbstractVideoSurface::ResourceError), 4},
    {sipName_StoppedError, static_cast<int>(QAbstractVideoSurface::StoppedError), 4},
    {sipName_UnsupportedFormatError, static_cast<int>(QAbstractVideoSurface::UnsupportedFormatError), 4},
};


/* Define this type's signals. */
static const pyqt4QtSignal signals_QAbstractVideoSurface[] = {
    {"supportedFormatsChanged()", "\1QAbstractVideoSurface.supportedFormatsChanged", 0, 0},
    {"surfaceFormatChanged(QVideoSurfaceFormat)", "\1QAbstractVideoSurface.surfaceFormatChanged[QVideoSurfaceFormat]", 0, 0},
    {"activeChanged(bool)", "\1QAbstractVideoSurface.activeChanged[bool]", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QAbstractVideoSurface, "\1QAbstractVideoSurface(QObject parent=None)");


pyqt4ClassTypeDef sipTypeDef_QtMultimedia_QAbstractVideoSurface = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QAbstractVideoSurface,
        {0}
    },
    {
        sipNameNr_QAbstractVideoSurface,
        {0, 0, 1},
        10, methods_QAbstractVideoSurface,
        5, enummembers_QAbstractVideoSurface,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QAbstractVideoSurface,
    -1,
    -1,
    supers_QAbstractVideoSurface,
    0,
    init_type_QAbstractVideoSurface,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QAbstractVideoSurface,
    0,
    0,
    0,
    release_QAbstractVideoSurface,
    cast_QAbstractVideoSurface,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QAbstractVideoSurface::staticMetaObject,
    0,
    signals_QAbstractVideoSurface,
};

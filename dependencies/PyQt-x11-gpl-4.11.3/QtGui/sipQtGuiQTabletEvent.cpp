/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.6
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 412 "/home/saiaravindbv/repos/graphite/dependencies/PyQt-x11-gpl-4.11.3/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 34 "/home/saiaravindbv/repos/graphite/dependencies/PyQt-x11-gpl-4.11.3/QtGui/sipQtGuiQTabletEvent.cpp"

#line 31 "/home/saiaravindbv/repos/graphite/dependencies/PyQt-x11-gpl-4.11.3/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 38 "/home/saiaravindbv/repos/graphite/dependencies/PyQt-x11-gpl-4.11.3/QtGui/sipQtGuiQTabletEvent.cpp"
#line 119 "/home/saiaravindbv/repos/graphite/dependencies/PyQt-x11-gpl-4.11.3/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 41 "/home/saiaravindbv/repos/graphite/dependencies/PyQt-x11-gpl-4.11.3/QtGui/sipQtGuiQTabletEvent.cpp"
#line 35 "/home/saiaravindbv/repos/graphite/dependencies/PyQt-x11-gpl-4.11.3/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 44 "/home/saiaravindbv/repos/graphite/dependencies/PyQt-x11-gpl-4.11.3/QtGui/sipQtGuiQTabletEvent.cpp"
#line 35 "/home/saiaravindbv/repos/graphite/dependencies/PyQt-x11-gpl-4.11.3/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 47 "/home/saiaravindbv/repos/graphite/dependencies/PyQt-x11-gpl-4.11.3/QtGui/sipQtGuiQTabletEvent.cpp"


class sipQTabletEvent : public QTabletEvent
{
public:
    sipQTabletEvent(QEvent::Type,const QPointF&,const QPointF&,int,int,qreal,int,int,qreal,qreal,int,Qt::KeyboardModifiers,qint64);
    sipQTabletEvent(const QTabletEvent&);
    ~sipQTabletEvent();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQTabletEvent(const sipQTabletEvent &);
    sipQTabletEvent &operator = (const sipQTabletEvent &);
};

sipQTabletEvent::sipQTabletEvent(QEvent::Type a0,const QPointF& a1,const QPointF& a2,int a3,int a4,qreal a5,int a6,int a7,qreal a8,qreal a9,int a10,Qt::KeyboardModifiers a11,qint64 a12): QTabletEvent(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12), sipPySelf(0)
{
}

sipQTabletEvent::sipQTabletEvent(const QTabletEvent& a0): QTabletEvent(a0), sipPySelf(0)
{
}

sipQTabletEvent::~sipQTabletEvent()
{
    sipCommonDtor(sipPySelf);
}


PyDoc_STRVAR(doc_QTabletEvent_pos, "QTabletEvent.pos() -> QPoint");

extern "C" {static PyObject *meth_QTabletEvent_pos(PyObject *, PyObject *);}
static PyObject *meth_QTabletEvent_pos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTabletEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabletEvent, &sipCpp))
        {
            QPoint*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPoint(sipCpp->pos());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabletEvent, sipName_pos, doc_QTabletEvent_pos);

    return NULL;
}


PyDoc_STRVAR(doc_QTabletEvent_globalPos, "QTabletEvent.globalPos() -> QPoint");

extern "C" {static PyObject *meth_QTabletEvent_globalPos(PyObject *, PyObject *);}
static PyObject *meth_QTabletEvent_globalPos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTabletEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabletEvent, &sipCpp))
        {
            QPoint*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPoint(sipCpp->globalPos());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabletEvent, sipName_globalPos, doc_QTabletEvent_globalPos);

    return NULL;
}


PyDoc_STRVAR(doc_QTabletEvent_hiResGlobalPos, "QTabletEvent.hiResGlobalPos() -> QPointF");

extern "C" {static PyObject *meth_QTabletEvent_hiResGlobalPos(PyObject *, PyObject *);}
static PyObject *meth_QTabletEvent_hiResGlobalPos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTabletEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabletEvent, &sipCpp))
        {
            QPointF*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPointF(sipCpp->hiResGlobalPos());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPointF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabletEvent, sipName_hiResGlobalPos, doc_QTabletEvent_hiResGlobalPos);

    return NULL;
}


PyDoc_STRVAR(doc_QTabletEvent_x, "QTabletEvent.x() -> int");

extern "C" {static PyObject *meth_QTabletEvent_x(PyObject *, PyObject *);}
static PyObject *meth_QTabletEvent_x(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTabletEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabletEvent, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->x();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabletEvent, sipName_x, doc_QTabletEvent_x);

    return NULL;
}


PyDoc_STRVAR(doc_QTabletEvent_y, "QTabletEvent.y() -> int");

extern "C" {static PyObject *meth_QTabletEvent_y(PyObject *, PyObject *);}
static PyObject *meth_QTabletEvent_y(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTabletEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabletEvent, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->y();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabletEvent, sipName_y, doc_QTabletEvent_y);

    return NULL;
}


PyDoc_STRVAR(doc_QTabletEvent_globalX, "QTabletEvent.globalX() -> int");

extern "C" {static PyObject *meth_QTabletEvent_globalX(PyObject *, PyObject *);}
static PyObject *meth_QTabletEvent_globalX(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTabletEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabletEvent, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->globalX();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabletEvent, sipName_globalX, doc_QTabletEvent_globalX);

    return NULL;
}


PyDoc_STRVAR(doc_QTabletEvent_globalY, "QTabletEvent.globalY() -> int");

extern "C" {static PyObject *meth_QTabletEvent_globalY(PyObject *, PyObject *);}
static PyObject *meth_QTabletEvent_globalY(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTabletEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabletEvent, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->globalY();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabletEvent, sipName_globalY, doc_QTabletEvent_globalY);

    return NULL;
}


PyDoc_STRVAR(doc_QTabletEvent_hiResGlobalX, "QTabletEvent.hiResGlobalX() -> float");

extern "C" {static PyObject *meth_QTabletEvent_hiResGlobalX(PyObject *, PyObject *);}
static PyObject *meth_QTabletEvent_hiResGlobalX(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTabletEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabletEvent, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hiResGlobalX();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabletEvent, sipName_hiResGlobalX, doc_QTabletEvent_hiResGlobalX);

    return NULL;
}


PyDoc_STRVAR(doc_QTabletEvent_hiResGlobalY, "QTabletEvent.hiResGlobalY() -> float");

extern "C" {static PyObject *meth_QTabletEvent_hiResGlobalY(PyObject *, PyObject *);}
static PyObject *meth_QTabletEvent_hiResGlobalY(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTabletEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabletEvent, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hiResGlobalY();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabletEvent, sipName_hiResGlobalY, doc_QTabletEvent_hiResGlobalY);

    return NULL;
}


PyDoc_STRVAR(doc_QTabletEvent_device, "QTabletEvent.device() -> QTabletEvent.TabletDevice");

extern "C" {static PyObject *meth_QTabletEvent_device(PyObject *, PyObject *);}
static PyObject *meth_QTabletEvent_device(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTabletEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabletEvent, &sipCpp))
        {
            QTabletEvent::TabletDevice sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->device();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QTabletEvent_TabletDevice);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabletEvent, sipName_device, doc_QTabletEvent_device);

    return NULL;
}


PyDoc_STRVAR(doc_QTabletEvent_pointerType, "QTabletEvent.pointerType() -> QTabletEvent.PointerType");

extern "C" {static PyObject *meth_QTabletEvent_pointerType(PyObject *, PyObject *);}
static PyObject *meth_QTabletEvent_pointerType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTabletEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabletEvent, &sipCpp))
        {
            QTabletEvent::PointerType sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->pointerType();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QTabletEvent_PointerType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabletEvent, sipName_pointerType, doc_QTabletEvent_pointerType);

    return NULL;
}


PyDoc_STRVAR(doc_QTabletEvent_uniqueId, "QTabletEvent.uniqueId() -> int");

extern "C" {static PyObject *meth_QTabletEvent_uniqueId(PyObject *, PyObject *);}
static PyObject *meth_QTabletEvent_uniqueId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTabletEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabletEvent, &sipCpp))
        {
            qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->uniqueId();
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabletEvent, sipName_uniqueId, doc_QTabletEvent_uniqueId);

    return NULL;
}


PyDoc_STRVAR(doc_QTabletEvent_pressure, "QTabletEvent.pressure() -> float");

extern "C" {static PyObject *meth_QTabletEvent_pressure(PyObject *, PyObject *);}
static PyObject *meth_QTabletEvent_pressure(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTabletEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabletEvent, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->pressure();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabletEvent, sipName_pressure, doc_QTabletEvent_pressure);

    return NULL;
}


PyDoc_STRVAR(doc_QTabletEvent_z, "QTabletEvent.z() -> int");

extern "C" {static PyObject *meth_QTabletEvent_z(PyObject *, PyObject *);}
static PyObject *meth_QTabletEvent_z(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTabletEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabletEvent, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->z();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabletEvent, sipName_z, doc_QTabletEvent_z);

    return NULL;
}


PyDoc_STRVAR(doc_QTabletEvent_tangentialPressure, "QTabletEvent.tangentialPressure() -> float");

extern "C" {static PyObject *meth_QTabletEvent_tangentialPressure(PyObject *, PyObject *);}
static PyObject *meth_QTabletEvent_tangentialPressure(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTabletEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabletEvent, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->tangentialPressure();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabletEvent, sipName_tangentialPressure, doc_QTabletEvent_tangentialPressure);

    return NULL;
}


PyDoc_STRVAR(doc_QTabletEvent_rotation, "QTabletEvent.rotation() -> float");

extern "C" {static PyObject *meth_QTabletEvent_rotation(PyObject *, PyObject *);}
static PyObject *meth_QTabletEvent_rotation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTabletEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabletEvent, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->rotation();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabletEvent, sipName_rotation, doc_QTabletEvent_rotation);

    return NULL;
}


PyDoc_STRVAR(doc_QTabletEvent_xTilt, "QTabletEvent.xTilt() -> int");

extern "C" {static PyObject *meth_QTabletEvent_xTilt(PyObject *, PyObject *);}
static PyObject *meth_QTabletEvent_xTilt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTabletEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabletEvent, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->xTilt();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabletEvent, sipName_xTilt, doc_QTabletEvent_xTilt);

    return NULL;
}


PyDoc_STRVAR(doc_QTabletEvent_yTilt, "QTabletEvent.yTilt() -> int");

extern "C" {static PyObject *meth_QTabletEvent_yTilt(PyObject *, PyObject *);}
static PyObject *meth_QTabletEvent_yTilt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTabletEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabletEvent, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->yTilt();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabletEvent, sipName_yTilt, doc_QTabletEvent_yTilt);

    return NULL;
}


PyDoc_STRVAR(doc_QTabletEvent_posF, "QTabletEvent.posF() -> QPointF");

extern "C" {static PyObject *meth_QTabletEvent_posF(PyObject *, PyObject *);}
static PyObject *meth_QTabletEvent_posF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTabletEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabletEvent, &sipCpp))
        {
            QPointF*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPointF(sipCpp->posF());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPointF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabletEvent, sipName_posF, doc_QTabletEvent_posF);

    return NULL;
}


PyDoc_STRVAR(doc_QTabletEvent_globalPosF, "QTabletEvent.globalPosF() -> QPointF");

extern "C" {static PyObject *meth_QTabletEvent_globalPosF(PyObject *, PyObject *);}
static PyObject *meth_QTabletEvent_globalPosF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTabletEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabletEvent, &sipCpp))
        {
            QPointF*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPointF(sipCpp->globalPosF());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPointF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabletEvent, sipName_globalPosF, doc_QTabletEvent_globalPosF);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QTabletEvent(void *, const sipTypeDef *);}
static void *cast_QTabletEvent(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QTabletEvent)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QInputEvent)->ctd_cast((QInputEvent *)(QTabletEvent *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTabletEvent(void *, int);}
static void release_QTabletEvent(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQTabletEvent *>(sipCppV);
    else
        delete reinterpret_cast<QTabletEvent *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QTabletEvent(sipSimpleWrapper *);}
static void dealloc_QTabletEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQTabletEvent *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QTabletEvent(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QTabletEvent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTabletEvent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQTabletEvent *sipCpp = 0;

    {
        QEvent::Type a0;
        const QPointF* a1;
        int a1State = 0;
        const QPointF* a2;
        int a2State = 0;
        int a3;
        int a4;
        qreal a5;
        int a6;
        int a7;
        qreal a8;
        qreal a9;
        int a10;
        Qt::KeyboardModifiers* a11;
        int a11State = 0;
        qint64 a12;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "EJ1J1iidiiddiJ1n", sipType_QEvent_Type, &a0, sipType_QPointF, &a1, &a1State, sipType_QPointF, &a2, &a2State, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10, sipType_Qt_KeyboardModifiers, &a11, &a11State, &a12))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQTabletEvent(a0,*a1,*a2,a3,a4,a5,a6,a7,a8,a9,a10,*a11,a12);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QPointF *>(a1),sipType_QPointF,a1State);
            sipReleaseType(const_cast<QPointF *>(a2),sipType_QPointF,a2State);
            sipReleaseType(a11,sipType_Qt_KeyboardModifiers,a11State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QTabletEvent* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QTabletEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQTabletEvent(*a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QTabletEvent[] = {{250, 255, 1}};


static PyMethodDef methods_QTabletEvent[] = {
    {SIP_MLNAME_CAST(sipName_device), meth_QTabletEvent_device, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabletEvent_device)},
    {SIP_MLNAME_CAST(sipName_globalPos), meth_QTabletEvent_globalPos, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabletEvent_globalPos)},
    {SIP_MLNAME_CAST(sipName_globalPosF), meth_QTabletEvent_globalPosF, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabletEvent_globalPosF)},
    {SIP_MLNAME_CAST(sipName_globalX), meth_QTabletEvent_globalX, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabletEvent_globalX)},
    {SIP_MLNAME_CAST(sipName_globalY), meth_QTabletEvent_globalY, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabletEvent_globalY)},
    {SIP_MLNAME_CAST(sipName_hiResGlobalPos), meth_QTabletEvent_hiResGlobalPos, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabletEvent_hiResGlobalPos)},
    {SIP_MLNAME_CAST(sipName_hiResGlobalX), meth_QTabletEvent_hiResGlobalX, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabletEvent_hiResGlobalX)},
    {SIP_MLNAME_CAST(sipName_hiResGlobalY), meth_QTabletEvent_hiResGlobalY, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabletEvent_hiResGlobalY)},
    {SIP_MLNAME_CAST(sipName_pointerType), meth_QTabletEvent_pointerType, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabletEvent_pointerType)},
    {SIP_MLNAME_CAST(sipName_pos), meth_QTabletEvent_pos, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabletEvent_pos)},
    {SIP_MLNAME_CAST(sipName_posF), meth_QTabletEvent_posF, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabletEvent_posF)},
    {SIP_MLNAME_CAST(sipName_pressure), meth_QTabletEvent_pressure, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabletEvent_pressure)},
    {SIP_MLNAME_CAST(sipName_rotation), meth_QTabletEvent_rotation, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabletEvent_rotation)},
    {SIP_MLNAME_CAST(sipName_tangentialPressure), meth_QTabletEvent_tangentialPressure, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabletEvent_tangentialPressure)},
    {SIP_MLNAME_CAST(sipName_uniqueId), meth_QTabletEvent_uniqueId, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabletEvent_uniqueId)},
    {SIP_MLNAME_CAST(sipName_x), meth_QTabletEvent_x, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabletEvent_x)},
    {SIP_MLNAME_CAST(sipName_xTilt), meth_QTabletEvent_xTilt, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabletEvent_xTilt)},
    {SIP_MLNAME_CAST(sipName_y), meth_QTabletEvent_y, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabletEvent_y)},
    {SIP_MLNAME_CAST(sipName_yTilt), meth_QTabletEvent_yTilt, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabletEvent_yTilt)},
    {SIP_MLNAME_CAST(sipName_z), meth_QTabletEvent_z, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabletEvent_z)}
};

static sipEnumMemberDef enummembers_QTabletEvent[] = {
    {sipName_Airbrush, static_cast<int>(QTabletEvent::Airbrush), 620},
    {sipName_Cursor, static_cast<int>(QTabletEvent::Cursor), 619},
    {sipName_Eraser, static_cast<int>(QTabletEvent::Eraser), 619},
    {sipName_FourDMouse, static_cast<int>(QTabletEvent::FourDMouse), 620},
    {sipName_NoDevice, static_cast<int>(QTabletEvent::NoDevice), 620},
    {sipName_Pen, static_cast<int>(QTabletEvent::Pen), 619},
    {sipName_Puck, static_cast<int>(QTabletEvent::Puck), 620},
    {sipName_RotationStylus, static_cast<int>(QTabletEvent::RotationStylus), 620},
    {sipName_Stylus, static_cast<int>(QTabletEvent::Stylus), 620},
    {sipName_UnknownPointer, static_cast<int>(QTabletEvent::UnknownPointer), 619},
    {sipName_XFreeEraser, static_cast<int>(QTabletEvent::XFreeEraser), 620},
};

PyDoc_STRVAR(doc_QTabletEvent, "\1QTabletEvent(QEvent.Type, QPointF, QPointF, int, int, float, int, int, float, float, int, Qt.KeyboardModifiers, int)\n"
    "QTabletEvent(QTabletEvent)");


pyqt4ClassTypeDef sipTypeDef_QtGui_QTabletEvent = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QTabletEvent,
        {0}
    },
    {
        sipNameNr_QTabletEvent,
        {0, 0, 1},
        20, methods_QTabletEvent,
        11, enummembers_QTabletEvent,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QTabletEvent,
    -1,
    -1,
    supers_QTabletEvent,
    0,
    init_type_QTabletEvent,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QTabletEvent,
    0,
    0,
    0,
    release_QTabletEvent,
    cast_QTabletEvent,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0
};

/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.6
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtNetwork.h"

#line 132 "/home/saiaravindbv/repos/graphite/dependencies/PyQt-x11-gpl-4.11.3/sip/QtNetwork/qdnslookup.sip"
#include <qdnslookup.h>
#line 34 "/home/saiaravindbv/repos/graphite/dependencies/PyQt-x11-gpl-4.11.3/QtNetwork/sipQtNetworkQDnsLookup.cpp"

#line 34 "/home/saiaravindbv/repos/graphite/dependencies/PyQt-x11-gpl-4.11.3/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 38 "/home/saiaravindbv/repos/graphite/dependencies/PyQt-x11-gpl-4.11.3/QtNetwork/sipQtNetworkQDnsLookup.cpp"
#line 36 "/home/saiaravindbv/repos/graphite/dependencies/PyQt-x11-gpl-4.11.3/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 41 "/home/saiaravindbv/repos/graphite/dependencies/PyQt-x11-gpl-4.11.3/QtNetwork/sipQtNetworkQDnsLookup.cpp"
#line 33 "/home/saiaravindbv/repos/graphite/dependencies/PyQt-x11-gpl-4.11.3/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 44 "/home/saiaravindbv/repos/graphite/dependencies/PyQt-x11-gpl-4.11.3/QtNetwork/sipQtNetworkQDnsLookup.cpp"
#line 113 "/home/saiaravindbv/repos/graphite/dependencies/PyQt-x11-gpl-4.11.3/sip/QtNetwork/qdnslookup.sip"
#include <qdnslookup.h>
#line 47 "/home/saiaravindbv/repos/graphite/dependencies/PyQt-x11-gpl-4.11.3/QtNetwork/sipQtNetworkQDnsLookup.cpp"
#line 33 "/home/saiaravindbv/repos/graphite/dependencies/PyQt-x11-gpl-4.11.3/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 50 "/home/saiaravindbv/repos/graphite/dependencies/PyQt-x11-gpl-4.11.3/QtNetwork/sipQtNetworkQDnsLookup.cpp"
#line 91 "/home/saiaravindbv/repos/graphite/dependencies/PyQt-x11-gpl-4.11.3/sip/QtNetwork/qdnslookup.sip"
#include <qdnslookup.h>
#line 53 "/home/saiaravindbv/repos/graphite/dependencies/PyQt-x11-gpl-4.11.3/QtNetwork/sipQtNetworkQDnsLookup.cpp"
#line 33 "/home/saiaravindbv/repos/graphite/dependencies/PyQt-x11-gpl-4.11.3/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 56 "/home/saiaravindbv/repos/graphite/dependencies/PyQt-x11-gpl-4.11.3/QtNetwork/sipQtNetworkQDnsLookup.cpp"
#line 33 "/home/saiaravindbv/repos/graphite/dependencies/PyQt-x11-gpl-4.11.3/sip/QtNetwork/qdnslookup.sip"
#include <qdnslookup.h>
#line 59 "/home/saiaravindbv/repos/graphite/dependencies/PyQt-x11-gpl-4.11.3/QtNetwork/sipQtNetworkQDnsLookup.cpp"
#line 33 "/home/saiaravindbv/repos/graphite/dependencies/PyQt-x11-gpl-4.11.3/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 62 "/home/saiaravindbv/repos/graphite/dependencies/PyQt-x11-gpl-4.11.3/QtNetwork/sipQtNetworkQDnsLookup.cpp"
#line 71 "/home/saiaravindbv/repos/graphite/dependencies/PyQt-x11-gpl-4.11.3/sip/QtNetwork/qdnslookup.sip"
#include <qdnslookup.h>
#line 65 "/home/saiaravindbv/repos/graphite/dependencies/PyQt-x11-gpl-4.11.3/QtNetwork/sipQtNetworkQDnsLookup.cpp"
#line 33 "/home/saiaravindbv/repos/graphite/dependencies/PyQt-x11-gpl-4.11.3/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 68 "/home/saiaravindbv/repos/graphite/dependencies/PyQt-x11-gpl-4.11.3/QtNetwork/sipQtNetworkQDnsLookup.cpp"
#line 52 "/home/saiaravindbv/repos/graphite/dependencies/PyQt-x11-gpl-4.11.3/sip/QtNetwork/qdnslookup.sip"
#include <qdnslookup.h>
#line 71 "/home/saiaravindbv/repos/graphite/dependencies/PyQt-x11-gpl-4.11.3/QtNetwork/sipQtNetworkQDnsLookup.cpp"
#line 35 "/home/saiaravindbv/repos/graphite/dependencies/PyQt-x11-gpl-4.11.3/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 74 "/home/saiaravindbv/repos/graphite/dependencies/PyQt-x11-gpl-4.11.3/QtNetwork/sipQtNetworkQDnsLookup.cpp"
#line 31 "/home/saiaravindbv/repos/graphite/dependencies/PyQt-x11-gpl-4.11.3/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 77 "/home/saiaravindbv/repos/graphite/dependencies/PyQt-x11-gpl-4.11.3/QtNetwork/sipQtNetworkQDnsLookup.cpp"
#line 355 "/home/saiaravindbv/repos/graphite/dependencies/PyQt-x11-gpl-4.11.3/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 80 "/home/saiaravindbv/repos/graphite/dependencies/PyQt-x11-gpl-4.11.3/QtNetwork/sipQtNetworkQDnsLookup.cpp"
#line 338 "/home/saiaravindbv/repos/graphite/dependencies/PyQt-x11-gpl-4.11.3/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 83 "/home/saiaravindbv/repos/graphite/dependencies/PyQt-x11-gpl-4.11.3/QtNetwork/sipQtNetworkQDnsLookup.cpp"
#line 274 "/home/saiaravindbv/repos/graphite/dependencies/PyQt-x11-gpl-4.11.3/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 86 "/home/saiaravindbv/repos/graphite/dependencies/PyQt-x11-gpl-4.11.3/QtNetwork/sipQtNetworkQDnsLookup.cpp"
#line 33 "/home/saiaravindbv/repos/graphite/dependencies/PyQt-x11-gpl-4.11.3/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 89 "/home/saiaravindbv/repos/graphite/dependencies/PyQt-x11-gpl-4.11.3/QtNetwork/sipQtNetworkQDnsLookup.cpp"
#line 37 "/home/saiaravindbv/repos/graphite/dependencies/PyQt-x11-gpl-4.11.3/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 92 "/home/saiaravindbv/repos/graphite/dependencies/PyQt-x11-gpl-4.11.3/QtNetwork/sipQtNetworkQDnsLookup.cpp"
#line 35 "/home/saiaravindbv/repos/graphite/dependencies/PyQt-x11-gpl-4.11.3/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 95 "/home/saiaravindbv/repos/graphite/dependencies/PyQt-x11-gpl-4.11.3/QtNetwork/sipQtNetworkQDnsLookup.cpp"
#line 120 "/home/saiaravindbv/repos/graphite/dependencies/PyQt-x11-gpl-4.11.3/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 98 "/home/saiaravindbv/repos/graphite/dependencies/PyQt-x11-gpl-4.11.3/QtNetwork/sipQtNetworkQDnsLookup.cpp"
#line 31 "/home/saiaravindbv/repos/graphite/dependencies/PyQt-x11-gpl-4.11.3/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 101 "/home/saiaravindbv/repos/graphite/dependencies/PyQt-x11-gpl-4.11.3/QtNetwork/sipQtNetworkQDnsLookup.cpp"
#line 35 "/home/saiaravindbv/repos/graphite/dependencies/PyQt-x11-gpl-4.11.3/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 104 "/home/saiaravindbv/repos/graphite/dependencies/PyQt-x11-gpl-4.11.3/QtNetwork/sipQtNetworkQDnsLookup.cpp"
#line 31 "/home/saiaravindbv/repos/graphite/dependencies/PyQt-x11-gpl-4.11.3/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 107 "/home/saiaravindbv/repos/graphite/dependencies/PyQt-x11-gpl-4.11.3/QtNetwork/sipQtNetworkQDnsLookup.cpp"


class sipQDnsLookup : public QDnsLookup
{
public:
    sipQDnsLookup(QObject*);
    sipQDnsLookup(QDnsLookup::Type,const QString&,QObject*);
    virtual ~sipQDnsLookup();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQDnsLookup(const sipQDnsLookup &);
    sipQDnsLookup &operator = (const sipQDnsLookup &);

    char sipPyMethods[7];
};

sipQDnsLookup::sipQDnsLookup(QObject*a0): QDnsLookup(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQDnsLookup::sipQDnsLookup(QDnsLookup::Type a0,const QString& a1,QObject*a2): QDnsLookup(a0,a1,a2), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQDnsLookup::~sipQDnsLookup()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQDnsLookup::metaObject() const
{
    return sip_QtNetwork_qt_metaobject(sipPySelf,sipType_QDnsLookup);
}

int sipQDnsLookup::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QDnsLookup::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtNetwork_qt_metacall(sipPySelf,sipType_QDnsLookup,_c,_id,_a);

    return _id;
}

void *sipQDnsLookup::qt_metacast(const char *_clname)
{
    return (sip_QtNetwork_qt_metacast(sipPySelf, sipType_QDnsLookup, _clname)) ? this : QDnsLookup::qt_metacast(_clname);
}

void sipQDnsLookup::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QDnsLookup::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_24)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDnsLookup::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QDnsLookup::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_24)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDnsLookup::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QDnsLookup::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDnsLookup::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QDnsLookup::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDnsLookup::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QDnsLookup::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQDnsLookup::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QDnsLookup::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[18]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQDnsLookup::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QDnsLookup::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QDnsLookup_error, "QDnsLookup.error() -> QDnsLookup.Error");

extern "C" {static PyObject *meth_QDnsLookup_error(PyObject *, PyObject *);}
static PyObject *meth_QDnsLookup_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDnsLookup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDnsLookup, &sipCpp))
        {
            QDnsLookup::Error sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->error();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QDnsLookup_Error);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDnsLookup, sipName_error, doc_QDnsLookup_error);

    return NULL;
}


PyDoc_STRVAR(doc_QDnsLookup_errorString, "QDnsLookup.errorString() -> str");

extern "C" {static PyObject *meth_QDnsLookup_errorString(PyObject *, PyObject *);}
static PyObject *meth_QDnsLookup_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDnsLookup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDnsLookup, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->errorString());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDnsLookup, sipName_errorString, doc_QDnsLookup_errorString);

    return NULL;
}


PyDoc_STRVAR(doc_QDnsLookup_isFinished, "QDnsLookup.isFinished() -> bool");

extern "C" {static PyObject *meth_QDnsLookup_isFinished(PyObject *, PyObject *);}
static PyObject *meth_QDnsLookup_isFinished(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDnsLookup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDnsLookup, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isFinished();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDnsLookup, sipName_isFinished, doc_QDnsLookup_isFinished);

    return NULL;
}


PyDoc_STRVAR(doc_QDnsLookup_name, "QDnsLookup.name() -> str");

extern "C" {static PyObject *meth_QDnsLookup_name(PyObject *, PyObject *);}
static PyObject *meth_QDnsLookup_name(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDnsLookup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDnsLookup, &sipCpp))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->name());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDnsLookup, sipName_name, doc_QDnsLookup_name);

    return NULL;
}


PyDoc_STRVAR(doc_QDnsLookup_setName, "QDnsLookup.setName(str)");

extern "C" {static PyObject *meth_QDnsLookup_setName(PyObject *, PyObject *);}
static PyObject *meth_QDnsLookup_setName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QDnsLookup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDnsLookup, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setName(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDnsLookup, sipName_setName, doc_QDnsLookup_setName);

    return NULL;
}


PyDoc_STRVAR(doc_QDnsLookup_type, "QDnsLookup.type() -> QDnsLookup.Type");

extern "C" {static PyObject *meth_QDnsLookup_type(PyObject *, PyObject *);}
static PyObject *meth_QDnsLookup_type(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDnsLookup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDnsLookup, &sipCpp))
        {
            QDnsLookup::Type sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->type();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QDnsLookup_Type);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDnsLookup, sipName_type, doc_QDnsLookup_type);

    return NULL;
}


PyDoc_STRVAR(doc_QDnsLookup_setType, "QDnsLookup.setType(QDnsLookup.Type)");

extern "C" {static PyObject *meth_QDnsLookup_setType(PyObject *, PyObject *);}
static PyObject *meth_QDnsLookup_setType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDnsLookup::Type a0;
        QDnsLookup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QDnsLookup, &sipCpp, sipType_QDnsLookup_Type, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setType(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDnsLookup, sipName_setType, doc_QDnsLookup_setType);

    return NULL;
}


PyDoc_STRVAR(doc_QDnsLookup_canonicalNameRecords, "QDnsLookup.canonicalNameRecords() -> list-of-QDnsDomainNameRecord");

extern "C" {static PyObject *meth_QDnsLookup_canonicalNameRecords(PyObject *, PyObject *);}
static PyObject *meth_QDnsLookup_canonicalNameRecords(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDnsLookup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDnsLookup, &sipCpp))
        {
            QList<QDnsDomainNameRecord>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QDnsDomainNameRecord>(sipCpp->canonicalNameRecords());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QDnsDomainNameRecord,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDnsLookup, sipName_canonicalNameRecords, doc_QDnsLookup_canonicalNameRecords);

    return NULL;
}


PyDoc_STRVAR(doc_QDnsLookup_hostAddressRecords, "QDnsLookup.hostAddressRecords() -> list-of-QDnsHostAddressRecord");

extern "C" {static PyObject *meth_QDnsLookup_hostAddressRecords(PyObject *, PyObject *);}
static PyObject *meth_QDnsLookup_hostAddressRecords(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDnsLookup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDnsLookup, &sipCpp))
        {
            QList<QDnsHostAddressRecord>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QDnsHostAddressRecord>(sipCpp->hostAddressRecords());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QDnsHostAddressRecord,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDnsLookup, sipName_hostAddressRecords, doc_QDnsLookup_hostAddressRecords);

    return NULL;
}


PyDoc_STRVAR(doc_QDnsLookup_mailExchangeRecords, "QDnsLookup.mailExchangeRecords() -> list-of-QDnsMailExchangeRecord");

extern "C" {static PyObject *meth_QDnsLookup_mailExchangeRecords(PyObject *, PyObject *);}
static PyObject *meth_QDnsLookup_mailExchangeRecords(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDnsLookup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDnsLookup, &sipCpp))
        {
            QList<QDnsMailExchangeRecord>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QDnsMailExchangeRecord>(sipCpp->mailExchangeRecords());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QDnsMailExchangeRecord,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDnsLookup, sipName_mailExchangeRecords, doc_QDnsLookup_mailExchangeRecords);

    return NULL;
}


PyDoc_STRVAR(doc_QDnsLookup_nameServerRecords, "QDnsLookup.nameServerRecords() -> list-of-QDnsDomainNameRecord");

extern "C" {static PyObject *meth_QDnsLookup_nameServerRecords(PyObject *, PyObject *);}
static PyObject *meth_QDnsLookup_nameServerRecords(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDnsLookup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDnsLookup, &sipCpp))
        {
            QList<QDnsDomainNameRecord>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QDnsDomainNameRecord>(sipCpp->nameServerRecords());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QDnsDomainNameRecord,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDnsLookup, sipName_nameServerRecords, doc_QDnsLookup_nameServerRecords);

    return NULL;
}


PyDoc_STRVAR(doc_QDnsLookup_pointerRecords, "QDnsLookup.pointerRecords() -> list-of-QDnsDomainNameRecord");

extern "C" {static PyObject *meth_QDnsLookup_pointerRecords(PyObject *, PyObject *);}
static PyObject *meth_QDnsLookup_pointerRecords(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDnsLookup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDnsLookup, &sipCpp))
        {
            QList<QDnsDomainNameRecord>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QDnsDomainNameRecord>(sipCpp->pointerRecords());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QDnsDomainNameRecord,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDnsLookup, sipName_pointerRecords, doc_QDnsLookup_pointerRecords);

    return NULL;
}


PyDoc_STRVAR(doc_QDnsLookup_serviceRecords, "QDnsLookup.serviceRecords() -> list-of-QDnsServiceRecord");

extern "C" {static PyObject *meth_QDnsLookup_serviceRecords(PyObject *, PyObject *);}
static PyObject *meth_QDnsLookup_serviceRecords(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDnsLookup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDnsLookup, &sipCpp))
        {
            QList<QDnsServiceRecord>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QDnsServiceRecord>(sipCpp->serviceRecords());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QDnsServiceRecord,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDnsLookup, sipName_serviceRecords, doc_QDnsLookup_serviceRecords);

    return NULL;
}


PyDoc_STRVAR(doc_QDnsLookup_textRecords, "QDnsLookup.textRecords() -> list-of-QDnsTextRecord");

extern "C" {static PyObject *meth_QDnsLookup_textRecords(PyObject *, PyObject *);}
static PyObject *meth_QDnsLookup_textRecords(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDnsLookup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDnsLookup, &sipCpp))
        {
            QList<QDnsTextRecord>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QDnsTextRecord>(sipCpp->textRecords());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QDnsTextRecord,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDnsLookup, sipName_textRecords, doc_QDnsLookup_textRecords);

    return NULL;
}


PyDoc_STRVAR(doc_QDnsLookup_abort, "QDnsLookup.abort()");

extern "C" {static PyObject *meth_QDnsLookup_abort(PyObject *, PyObject *);}
static PyObject *meth_QDnsLookup_abort(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDnsLookup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDnsLookup, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->abort();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDnsLookup, sipName_abort, doc_QDnsLookup_abort);

    return NULL;
}


PyDoc_STRVAR(doc_QDnsLookup_lookup, "QDnsLookup.lookup()");

extern "C" {static PyObject *meth_QDnsLookup_lookup(PyObject *, PyObject *);}
static PyObject *meth_QDnsLookup_lookup(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDnsLookup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDnsLookup, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->lookup();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDnsLookup, sipName_lookup, doc_QDnsLookup_lookup);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QDnsLookup(void *, const sipTypeDef *);}
static void *cast_QDnsLookup(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QDnsLookup)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QDnsLookup *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QDnsLookup(void *, int);}
static void release_QDnsLookup(void *sipCppV,int)
{
    QDnsLookup *sipCpp = reinterpret_cast<QDnsLookup *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QDnsLookup(sipSimpleWrapper *);}
static void dealloc_QDnsLookup(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQDnsLookup *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QDnsLookup(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QDnsLookup(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QDnsLookup(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQDnsLookup *sipCpp = 0;

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQDnsLookup(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        QDnsLookup::Type a0;
        const QString* a1;
        int a1State = 0;
        QObject* a2 = 0;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "EJ1|JH", sipType_QDnsLookup_Type, &a0, sipType_QString,&a1, &a1State, sipType_QObject, &a2, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQDnsLookup(a0,*a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QDnsLookup[] = {{138, 0, 1}};


static PyMethodDef methods_QDnsLookup[] = {
    {SIP_MLNAME_CAST(sipName_abort), meth_QDnsLookup_abort, METH_VARARGS, SIP_MLDOC_CAST(doc_QDnsLookup_abort)},
    {SIP_MLNAME_CAST(sipName_canonicalNameRecords), meth_QDnsLookup_canonicalNameRecords, METH_VARARGS, SIP_MLDOC_CAST(doc_QDnsLookup_canonicalNameRecords)},
    {SIP_MLNAME_CAST(sipName_error), meth_QDnsLookup_error, METH_VARARGS, SIP_MLDOC_CAST(doc_QDnsLookup_error)},
    {SIP_MLNAME_CAST(sipName_errorString), meth_QDnsLookup_errorString, METH_VARARGS, SIP_MLDOC_CAST(doc_QDnsLookup_errorString)},
    {SIP_MLNAME_CAST(sipName_hostAddressRecords), meth_QDnsLookup_hostAddressRecords, METH_VARARGS, SIP_MLDOC_CAST(doc_QDnsLookup_hostAddressRecords)},
    {SIP_MLNAME_CAST(sipName_isFinished), meth_QDnsLookup_isFinished, METH_VARARGS, SIP_MLDOC_CAST(doc_QDnsLookup_isFinished)},
    {SIP_MLNAME_CAST(sipName_lookup), meth_QDnsLookup_lookup, METH_VARARGS, SIP_MLDOC_CAST(doc_QDnsLookup_lookup)},
    {SIP_MLNAME_CAST(sipName_mailExchangeRecords), meth_QDnsLookup_mailExchangeRecords, METH_VARARGS, SIP_MLDOC_CAST(doc_QDnsLookup_mailExchangeRecords)},
    {SIP_MLNAME_CAST(sipName_name), meth_QDnsLookup_name, METH_VARARGS, SIP_MLDOC_CAST(doc_QDnsLookup_name)},
    {SIP_MLNAME_CAST(sipName_nameServerRecords), meth_QDnsLookup_nameServerRecords, METH_VARARGS, SIP_MLDOC_CAST(doc_QDnsLookup_nameServerRecords)},
    {SIP_MLNAME_CAST(sipName_pointerRecords), meth_QDnsLookup_pointerRecords, METH_VARARGS, SIP_MLDOC_CAST(doc_QDnsLookup_pointerRecords)},
    {SIP_MLNAME_CAST(sipName_serviceRecords), meth_QDnsLookup_serviceRecords, METH_VARARGS, SIP_MLDOC_CAST(doc_QDnsLookup_serviceRecords)},
    {SIP_MLNAME_CAST(sipName_setName), meth_QDnsLookup_setName, METH_VARARGS, SIP_MLDOC_CAST(doc_QDnsLookup_setName)},
    {SIP_MLNAME_CAST(sipName_setType), meth_QDnsLookup_setType, METH_VARARGS, SIP_MLDOC_CAST(doc_QDnsLookup_setType)},
    {SIP_MLNAME_CAST(sipName_textRecords), meth_QDnsLookup_textRecords, METH_VARARGS, SIP_MLDOC_CAST(doc_QDnsLookup_textRecords)},
    {SIP_MLNAME_CAST(sipName_type), meth_QDnsLookup_type, METH_VARARGS, SIP_MLDOC_CAST(doc_QDnsLookup_type)}
};

static sipEnumMemberDef enummembers_QDnsLookup[] = {
    {sipName_A, static_cast<int>(QDnsLookup::A), 16},
    {sipName_AAAA, static_cast<int>(QDnsLookup::AAAA), 16},
    {sipName_ANY, static_cast<int>(QDnsLookup::ANY), 16},
    {sipName_CNAME, static_cast<int>(QDnsLookup::CNAME), 16},
    {sipName_InvalidReplyError, static_cast<int>(QDnsLookup::InvalidReplyError), 15},
    {sipName_InvalidRequestError, static_cast<int>(QDnsLookup::InvalidRequestError), 15},
    {sipName_MX, static_cast<int>(QDnsLookup::MX), 16},
    {sipName_NS, static_cast<int>(QDnsLookup::NS), 16},
    {sipName_NoError, static_cast<int>(QDnsLookup::NoError), 15},
    {sipName_NotFoundError, static_cast<int>(QDnsLookup::NotFoundError), 15},
    {sipName_OperationCancelledError, static_cast<int>(QDnsLookup::OperationCancelledError), 15},
    {sipName_PTR, static_cast<int>(QDnsLookup::PTR), 16},
    {sipName_ResolverError, static_cast<int>(QDnsLookup::ResolverError), 15},
    {sipName_SRV, static_cast<int>(QDnsLookup::SRV), 16},
    {sipName_ServerFailureError, static_cast<int>(QDnsLookup::ServerFailureError), 15},
    {sipName_ServerRefusedError, static_cast<int>(QDnsLookup::ServerRefusedError), 15},
    {sipName_TXT, static_cast<int>(QDnsLookup::TXT), 16},
};


/* Define this type's signals. */
static const pyqt4QtSignal signals_QDnsLookup[] = {
    {"typeChanged(QDnsLookup::Type)", "\1QDnsLookup.typeChanged[QDnsLookup.Type]", 0, 0},
    {"nameChanged(QString)", "\1QDnsLookup.nameChanged[str]", 0, 0},
    {"finished()", "\1QDnsLookup.finished", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QDnsLookup, "\1QDnsLookup(QObject parent=None)\n"
    "QDnsLookup(QDnsLookup.Type, str, QObject parent=None)");


pyqt4ClassTypeDef sipTypeDef_QtNetwork_QDnsLookup = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QDnsLookup,
        {0}
    },
    {
        sipNameNr_QDnsLookup,
        {0, 0, 1},
        16, methods_QDnsLookup,
        17, enummembers_QDnsLookup,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QDnsLookup,
    -1,
    -1,
    supers_QDnsLookup,
    0,
    init_type_QDnsLookup,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QDnsLookup,
    0,
    0,
    0,
    release_QDnsLookup,
    cast_QDnsLookup,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QDnsLookup::staticMetaObject,
    0,
    signals_QDnsLookup,
};

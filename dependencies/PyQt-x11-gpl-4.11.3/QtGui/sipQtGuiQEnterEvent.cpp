/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.6
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 1134 "/home/saiaravindbv/repos/graphite/dependencies/PyQt-x11-gpl-4.11.3/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 34 "/home/saiaravindbv/repos/graphite/dependencies/PyQt-x11-gpl-4.11.3/QtGui/sipQtGuiQEnterEvent.cpp"

#line 119 "/home/saiaravindbv/repos/graphite/dependencies/PyQt-x11-gpl-4.11.3/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 38 "/home/saiaravindbv/repos/graphite/dependencies/PyQt-x11-gpl-4.11.3/QtGui/sipQtGuiQEnterEvent.cpp"
#line 35 "/home/saiaravindbv/repos/graphite/dependencies/PyQt-x11-gpl-4.11.3/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 41 "/home/saiaravindbv/repos/graphite/dependencies/PyQt-x11-gpl-4.11.3/QtGui/sipQtGuiQEnterEvent.cpp"
#line 31 "/home/saiaravindbv/repos/graphite/dependencies/PyQt-x11-gpl-4.11.3/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 44 "/home/saiaravindbv/repos/graphite/dependencies/PyQt-x11-gpl-4.11.3/QtGui/sipQtGuiQEnterEvent.cpp"


class sipQEnterEvent : public QEnterEvent
{
public:
    sipQEnterEvent(const QPointF&,const QPointF&,const QPointF&);
    sipQEnterEvent(const QEnterEvent&);
    ~sipQEnterEvent();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQEnterEvent(const sipQEnterEvent &);
    sipQEnterEvent &operator = (const sipQEnterEvent &);
};

sipQEnterEvent::sipQEnterEvent(const QPointF& a0,const QPointF& a1,const QPointF& a2): QEnterEvent(a0,a1,a2), sipPySelf(0)
{
}

sipQEnterEvent::sipQEnterEvent(const QEnterEvent& a0): QEnterEvent(a0), sipPySelf(0)
{
}

sipQEnterEvent::~sipQEnterEvent()
{
    sipCommonDtor(sipPySelf);
}


PyDoc_STRVAR(doc_QEnterEvent_pos, "QEnterEvent.pos() -> QPoint");

extern "C" {static PyObject *meth_QEnterEvent_pos(PyObject *, PyObject *);}
static PyObject *meth_QEnterEvent_pos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QEnterEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QEnterEvent, &sipCpp))
        {
            QPoint*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPoint(sipCpp->pos());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QEnterEvent, sipName_pos, doc_QEnterEvent_pos);

    return NULL;
}


PyDoc_STRVAR(doc_QEnterEvent_globalPos, "QEnterEvent.globalPos() -> QPoint");

extern "C" {static PyObject *meth_QEnterEvent_globalPos(PyObject *, PyObject *);}
static PyObject *meth_QEnterEvent_globalPos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QEnterEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QEnterEvent, &sipCpp))
        {
            QPoint*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPoint(sipCpp->globalPos());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QEnterEvent, sipName_globalPos, doc_QEnterEvent_globalPos);

    return NULL;
}


PyDoc_STRVAR(doc_QEnterEvent_x, "QEnterEvent.x() -> int");

extern "C" {static PyObject *meth_QEnterEvent_x(PyObject *, PyObject *);}
static PyObject *meth_QEnterEvent_x(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QEnterEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QEnterEvent, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->x();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QEnterEvent, sipName_x, doc_QEnterEvent_x);

    return NULL;
}


PyDoc_STRVAR(doc_QEnterEvent_y, "QEnterEvent.y() -> int");

extern "C" {static PyObject *meth_QEnterEvent_y(PyObject *, PyObject *);}
static PyObject *meth_QEnterEvent_y(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QEnterEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QEnterEvent, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->y();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QEnterEvent, sipName_y, doc_QEnterEvent_y);

    return NULL;
}


PyDoc_STRVAR(doc_QEnterEvent_globalX, "QEnterEvent.globalX() -> int");

extern "C" {static PyObject *meth_QEnterEvent_globalX(PyObject *, PyObject *);}
static PyObject *meth_QEnterEvent_globalX(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QEnterEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QEnterEvent, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->globalX();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QEnterEvent, sipName_globalX, doc_QEnterEvent_globalX);

    return NULL;
}


PyDoc_STRVAR(doc_QEnterEvent_globalY, "QEnterEvent.globalY() -> int");

extern "C" {static PyObject *meth_QEnterEvent_globalY(PyObject *, PyObject *);}
static PyObject *meth_QEnterEvent_globalY(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QEnterEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QEnterEvent, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->globalY();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QEnterEvent, sipName_globalY, doc_QEnterEvent_globalY);

    return NULL;
}


PyDoc_STRVAR(doc_QEnterEvent_localPos, "QEnterEvent.localPos() -> QPointF");

extern "C" {static PyObject *meth_QEnterEvent_localPos(PyObject *, PyObject *);}
static PyObject *meth_QEnterEvent_localPos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QEnterEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QEnterEvent, &sipCpp))
        {
            QPointF*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPointF(sipCpp->localPos());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPointF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QEnterEvent, sipName_localPos, doc_QEnterEvent_localPos);

    return NULL;
}


PyDoc_STRVAR(doc_QEnterEvent_windowPos, "QEnterEvent.windowPos() -> QPointF");

extern "C" {static PyObject *meth_QEnterEvent_windowPos(PyObject *, PyObject *);}
static PyObject *meth_QEnterEvent_windowPos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QEnterEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QEnterEvent, &sipCpp))
        {
            QPointF*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPointF(sipCpp->windowPos());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPointF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QEnterEvent, sipName_windowPos, doc_QEnterEvent_windowPos);

    return NULL;
}


PyDoc_STRVAR(doc_QEnterEvent_screenPos, "QEnterEvent.screenPos() -> QPointF");

extern "C" {static PyObject *meth_QEnterEvent_screenPos(PyObject *, PyObject *);}
static PyObject *meth_QEnterEvent_screenPos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QEnterEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QEnterEvent, &sipCpp))
        {
            QPointF*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPointF(sipCpp->screenPos());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPointF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QEnterEvent, sipName_screenPos, doc_QEnterEvent_screenPos);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QEnterEvent(void *, const sipTypeDef *);}
static void *cast_QEnterEvent(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QEnterEvent)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QEvent)->ctd_cast((QEvent *)(QEnterEvent *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QEnterEvent(void *, int);}
static void release_QEnterEvent(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQEnterEvent *>(sipCppV);
    else
        delete reinterpret_cast<QEnterEvent *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QEnterEvent(sipSimpleWrapper *);}
static void dealloc_QEnterEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQEnterEvent *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QEnterEvent(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QEnterEvent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QEnterEvent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQEnterEvent *sipCpp = 0;

    {
        const QPointF* a0;
        int a0State = 0;
        const QPointF* a1;
        int a1State = 0;
        const QPointF* a2;
        int a2State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1J1J1", sipType_QPointF, &a0, &a0State, sipType_QPointF, &a1, &a1State, sipType_QPointF, &a2, &a2State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQEnterEvent(*a0,*a1,*a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QPointF *>(a0),sipType_QPointF,a0State);
            sipReleaseType(const_cast<QPointF *>(a1),sipType_QPointF,a1State);
            sipReleaseType(const_cast<QPointF *>(a2),sipType_QPointF,a2State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QEnterEvent* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QEnterEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQEnterEvent(*a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QEnterEvent[] = {{52, 0, 1}};


static PyMethodDef methods_QEnterEvent[] = {
    {SIP_MLNAME_CAST(sipName_globalPos), meth_QEnterEvent_globalPos, METH_VARARGS, SIP_MLDOC_CAST(doc_QEnterEvent_globalPos)},
    {SIP_MLNAME_CAST(sipName_globalX), meth_QEnterEvent_globalX, METH_VARARGS, SIP_MLDOC_CAST(doc_QEnterEvent_globalX)},
    {SIP_MLNAME_CAST(sipName_globalY), meth_QEnterEvent_globalY, METH_VARARGS, SIP_MLDOC_CAST(doc_QEnterEvent_globalY)},
    {SIP_MLNAME_CAST(sipName_localPos), meth_QEnterEvent_localPos, METH_VARARGS, SIP_MLDOC_CAST(doc_QEnterEvent_localPos)},
    {SIP_MLNAME_CAST(sipName_pos), meth_QEnterEvent_pos, METH_VARARGS, SIP_MLDOC_CAST(doc_QEnterEvent_pos)},
    {SIP_MLNAME_CAST(sipName_screenPos), meth_QEnterEvent_screenPos, METH_VARARGS, SIP_MLDOC_CAST(doc_QEnterEvent_screenPos)},
    {SIP_MLNAME_CAST(sipName_windowPos), meth_QEnterEvent_windowPos, METH_VARARGS, SIP_MLDOC_CAST(doc_QEnterEvent_windowPos)},
    {SIP_MLNAME_CAST(sipName_x), meth_QEnterEvent_x, METH_VARARGS, SIP_MLDOC_CAST(doc_QEnterEvent_x)},
    {SIP_MLNAME_CAST(sipName_y), meth_QEnterEvent_y, METH_VARARGS, SIP_MLDOC_CAST(doc_QEnterEvent_y)}
};

PyDoc_STRVAR(doc_QEnterEvent, "\1QEnterEvent(QPointF, QPointF, QPointF)\n"
    "QEnterEvent(QEnterEvent)");


pyqt4ClassTypeDef sipTypeDef_QtGui_QEnterEvent = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QEnterEvent,
        {0}
    },
    {
        sipNameNr_QEnterEvent,
        {0, 0, 1},
        9, methods_QEnterEvent,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QEnterEvent,
    -1,
    -1,
    supers_QEnterEvent,
    0,
    init_type_QEnterEvent,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QEnterEvent,
    0,
    0,
    0,
    release_QEnterEvent,
    cast_QEnterEvent,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0
};
